scalar date

type Query {
  Users: [User]
  User(id: ID!): User

  Services: [Service]
  Service(id: ID!): Service

  Login(email: String!, password: String!): Auth
}

type Mutation {
  CreateUser(data: UserCreate!): Boolean!
  UpdateUser(data: UserInput!): Boolean!
  DeleteUser(id: ID!): Boolean!

  CreateService(data: ServiceCreate): String!
  UpdateService(data: ServiceInput): Boolean!
  DeleteService(id: ID!): Boolean!
}

type User {
  _id: ID!
  name: String!
  lastName: String!
  email: String!
  type: String!
}

enum UserType {
  USER
  EMPLOYEE
  ADMIN
}

input UserCreate {
  name: String!
  lastName: String!
  email: String!
  password: String!
  type: String
}

input UserInput {
  _id: ID!
  name: String
  lastName: String
  email: String
  password: String
  type: String
}

type Service {
  _id: ID!
  user: User!
  atendend: User
  description: String!
  price: String!
  type: ServiceType!
  dateStart: date!
  dateEnd: date
}

enum ServiceType {
  DELIVERY
  PRODUCT
  STAND
}

input ServiceCreate {
  user: ID!
  atendend: ID
  description: String!
  price: String!
  type: ServiceType!
  dateStart: date
  dateEnd: date
}

input ServiceInput {
  _id: ID
  user: ID
  atendend: ID
  description: String
  price: String
  type: ServiceType
  dateStart: date
  dateEnd: date
}

type Auth{
  token: String
  user: User
}